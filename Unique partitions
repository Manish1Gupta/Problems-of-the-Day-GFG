class Solution{
	public:
	set<vector<int>> s;
	vector<int> ss;
	
	void dfs(vector<int> ans, int n, int i)
	{
	    if(n == 0)
	    {
	        sort(ans.begin(), ans.end(), greater<int>());
	        s.insert(ans);
	        return;
	    }
	    
	    if(n < 0 || i == ss.size())
	    {
	        return;
	    }
	    
	    dfs(ans, n, i+1);
	    ans.push_back(ss[i]);
	    dfs(ans, n-ss[i], i);
	}
	
    vector<vector<int>> UniquePartitions(int n) {
        // Code here
        
        for(int i = 1; i <= n; i++)
        {
            ss.push_back(i);
        }
        
        vector<int> ans;
        dfs(ans, n, 0);
        
        vector<vector<int>> sol(s.begin(), s.end());
        sort(sol.begin(), sol.end(), greater<vector<int>>());
        
        return sol;
    }
};
