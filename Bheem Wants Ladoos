class Solution{
    void solve(Node *curr,Node* parent,unordered_map<Node*, Node*>&m){
        if(curr==NULL)return;
        m[curr]=parent;
        solve(curr->left,curr,m);
        solve(curr->right,curr,m);
        return;
    }
    public:
    Node * targets=NULL;
    void solve1(Node* root, int &target){
        if(root==NULL)return;
        if(root->data==target){
            targets=root;
        }
        solve1(root->left,target);
        solve1(root->right,target);
        return;
    }
    void distance(Node *root,int k,set<Node*>&s,unordered_map<Node* , Node*>&m,vector<int>&ans){
        if(k<0 || s.find(root)!=s.end() || root==NULL)return;
        s.insert(root);
        ans.push_back(root->data);
        if(k==0){
            return;
        }
        distance(root->left,k-1,s,m,ans);
        distance(root->right,k-1,s,m,ans);
        distance(m[root],k-1,s,m,ans);
        return;
    }
    int ladoos(Node* root, int home, int k)
    {
        // Your code goes here
        unordered_map<Node*, Node*>m;
        solve(root,NULL,m);
        set<Node*>vis;
        solve1(root,home);
        vector<int>ans;
        int sum=0;
        distance(targets,k,vis,m,ans);
        for(int i=0;i<ans.size();i++){
            sum+=ans[i];
        }
        return sum;
    }


};
