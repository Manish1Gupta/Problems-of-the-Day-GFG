class Solution{

public:

    //Function to count subarrays with sum equal to 0.

    long long int findSubarray(vector<long long int> &arr, int n ) {

        //code here

     

    // create an empty map to store the subarray sum frequency

    unordered_map<int, int> map;

 

    // insert (0, 1) pair into the map to handle the case when

    // subarray with 0 sum starts from index 0

    map[0] = 1;

 

    // stores the sum of elements so far

    int sum = 0;

 

    // stores the total count of subarrays having sum 0

    int count = 0;

 

    // traverse the given array

    for (int i = 0; i < n; i++)

    {

        // sum of elements so far

        sum += arr[i];

 

        // if sum is seen before, there exists at-least one

        // subarray ending at index i with 0 sum

        if (map.find(sum) != map.end())

        {

            // increase the count by the frequency of sum

            count += map[sum];

        }

 

        // insert (sum, frequency of sum) pair into the map

        map[sum]++;

    }

 

    return count;

  }

};
